package view;

import entities.Objeto;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class Principal extends javax.swing.JFrame {

    Objeto obj = new Objeto();

    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnImportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Importacao VIPP");
        getContentPane().setLayout(null);

        jPanel1.setToolTipText("");
        jPanel1.setLayout(null);

        btnImportar.setText("Selecione o Arquivo");
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });
        jPanel1.add(btnImportar);
        btnImportar.setBounds(50, 20, 220, 50);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 320, 80);

        setSize(new java.awt.Dimension(333, 121));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed

        JFileChooser files = new JFileChooser();
        files.setDialogTitle("Selecione o arquivo");
        files.setFileSelectionMode(JFileChooser.FILES_ONLY);
        files.showOpenDialog(files);
        files.getSelectedFile();
        String url = files.getSelectedFile().getPath();
        File file = new File(url);
        try {
            FileInputStream fileInputStream = new FileInputStream(file);
            //Cria um woorkbook com todas as abas da planilha
            XSSFWorkbook workbook = new XSSFWorkbook(fileInputStream);
            
            //recupera a segunda aba da planilha
            XSSFSheet sheet = workbook.getSheetAt(1);
            
            //retorna todas as linhas da planilha 1 ou aba 2
            Iterator<Row> rowInterator = sheet.iterator();
            
            String temp = null;
            
            //varre todas as linhas da planilha como se fosse um Resultset
            while(rowInterator.hasNext()){
                //recebe cada linha da planilha
                Row row = rowInterator.next();
                
                //Pegamos todas as celulas desta linha
                Iterator<Cell> cellInterator = row.iterator();
                
                //Varremos todas as celulas da linha atual
                
                
                while(cellInterator.hasNext()){                    
                    //Aqui criamos uma celula
                    Cell cell = cellInterator.next();
                    
                    
                    
                    if(temp.)
                
                    switch(cell.getColumnIndex()){
                        
                        case 1:
                            String observacao_2 = "" + cell.getStringCellValue();
                        
                        case 11:
                            String conteudo = "" + cell.getStringCellValue();
                            
                        case 14: 
                            String destinatario = "" + cell.getStringCellValue();
                        
                        case 16:
                            String endereco = "" + cell.getStringCellValue();
                            
                        case 17:
                            Integer numero = Integer.parseInt(cell.getStringCellValue()); 
                         
                        case 18:
                            String bairro = "" + cell.getStringCellValue();
                        
                        case 19:
                            String complemento = "" + cell.getStringCellValue();
                            
                        case 20:
                            String cep = "" + cell.getStringCellValue();
                            
                        case 21: 
                            String cidade = "" + cell.getStringCellValue();
                            
                        case 22:
                            String uf = "" + cell.getStringCellValue();
                         
                    }
                }
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnImportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImportar;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
